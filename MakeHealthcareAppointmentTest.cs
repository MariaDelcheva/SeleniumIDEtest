// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class MakehealthcareappointmentTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void makehealthcareappointment() {
    // Test name: make healthcare appointment
    // Step # | name | target | value
    // 1 | open | https://katalon-demo-cura.herokuapp.com/ | 
    driver.Navigate().GoToUrl("https://katalon-demo-cura.herokuapp.com/");
    // 2 | click | id=menu-toggle | 
    driver.FindElement(By.Id("menu-toggle")).Click();
    // 3 | click | linkText=Login | 
    driver.FindElement(By.LinkText("Login")).Click();
    // 4 | type | id=txt-username | John Doe
    driver.FindElement(By.Id("txt-username")).SendKeys("John Doe");
    // 5 | type | id=txt-password | ThisIsNotAPassword
    driver.FindElement(By.Id("txt-password")).SendKeys("ThisIsNotAPassword");
    // 6 | click | id=btn-login | 
    driver.FindElement(By.Id("btn-login")).Click();
    // 7 | assertText | css=h1 | CURA Healthcare Service
    Assert.That(driver.FindElement(By.CssSelector("h1")).Text, Is.EqualTo("CURA Healthcare Service"));
    // 8 | assertText | css=h3 | We Care About Your Health
    Assert.That(driver.FindElement(By.CssSelector("h3")).Text, Is.EqualTo("We Care About Your Health"));
    // 9 | assertElementPresent | id=btn-make-appointment | 
    var elements = driver.FindElements(By.Id("btn-make-appointment"));
    Assert.True(elements.Count > 0);
    // 10 | assertText | css=h2 | Make Appointment
    Assert.That(driver.FindElement(By.CssSelector("h2")).Text, Is.EqualTo("Make Appointment"));
    // 11 | type | id=combo_facility | Hongkong CURA Healthcare Center
    driver.FindElement(By.Id("combo_facility")).SendKeys("Hongkong CURA Healthcare Center");
    // 12 | click | id=radio_program_none | 
    driver.FindElement(By.Id("radio_program_none")).Click();
    // 13 | type | id=txt_visit_date | 22/07/2024
    driver.FindElement(By.Id("txt_visit_date")).SendKeys("22/07/2024");
    // 14 | type | id=txt_comment | high temperature
    driver.FindElement(By.Id("txt_comment")).SendKeys("high temperature");
    // 15 | click | id=btn-book-appointment | 
    driver.FindElement(By.Id("btn-book-appointment")).Click();
    // 16 | assertText | css=h2 | Appointment Confirmation
    Assert.That(driver.FindElement(By.CssSelector("h2")).Text, Is.EqualTo("Appointment Confirmation"));
    // 17 | assertText | css=.lead | Please be informed that your appointment has been booked as following:
    Assert.That(driver.FindElement(By.CssSelector(".lead")).Text, Is.EqualTo("Please be informed that your appointment has been booked as following:"));
    // 18 | assertElementPresent | css=label[for='facility'] | Facility
    var elements = driver.FindElements(By.CssSelector("label[for=\'facility\']"));
    Assert.True(elements.Count > 0);
    // 19 | assertText | id=facility | Hongkong CURA Healthcare Center
    Assert.That(driver.FindElement(By.Id("facility")).Text, Is.EqualTo("Hongkong CURA Healthcare Center"));
    // 20 | assertElementPresent | css=label[for='hospital_readmission'] | Apply for hospital readmission
    var elements = driver.FindElements(By.CssSelector("label[for=\'hospital_readmission\']"));
    Assert.True(elements.Count > 0);
    // 21 | assertText | id=hospital_readmission | No
    Assert.That(driver.FindElement(By.Id("hospital_readmission")).Text, Is.EqualTo("No"));
    // 22 | assertElementPresent | css=label[for='program'] | Healthcare Program
    var elements = driver.FindElements(By.CssSelector("label[for=\'program\']"));
    Assert.True(elements.Count > 0);
    // 23 | assertText | id=program | None
    Assert.That(driver.FindElement(By.Id("program")).Text, Is.EqualTo("None"));
    // 24 | assertElementPresent | css=label[for='visit_date'] | Visit Date
    var elements = driver.FindElements(By.CssSelector("label[for=\'visit_date\']"));
    Assert.True(elements.Count > 0);
    // 25 | assertText | id=visit_date | 22/07/2024
    Assert.That(driver.FindElement(By.Id("visit_date")).Text, Is.EqualTo("22/07/2024"));
    // 26 | assertElementPresent | css=label[for='comment'] | Comment
    var elements = driver.FindElements(By.CssSelector("label[for=\'comment\']"));
    Assert.True(elements.Count > 0);
    // 27 | assertText | id=comment | high temperature
    Assert.That(driver.FindElement(By.Id("comment")).Text, Is.EqualTo("high temperature"));
    // 28 | assertElementPresent | linkText=Go to Homepage | 
    var elements = driver.FindElements(By.LinkText("Go to Homepage"));
    Assert.True(elements.Count > 0);
    // 29 | close |  | 
    driver.Close();
  }
}
